name: Deploy TinyVault to EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DB_URL: ${{ secrets.DB_URL }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
  WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}  
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          
      - name: Setup SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/aws_keys.pem
          chmod 600 ~/aws_keys.pem
          echo "SSH key permissions: $(ls -la ~/aws_keys.pem)"

      - name: Test SSH connection
        run: |
          # Test SSH connection and determine correct username
          if ssh -i ~/aws_keys.pem -o StrictHostKeyChecking=no -o ConnectTimeout=30 ec2-user@${{ secrets.EC2_HOST }} "echo 'SSH connection successful with ec2-user'"; then
            echo "ANSIBLE_USER=ec2-user" >> $GITHUB_ENV
            echo "✅ SSH connection successful with ec2-user"
          elif ssh -i ~/aws_keys.pem -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH connection successful with ubuntu'"; then
            echo "ANSIBLE_USER=ubuntu" >> $GITHUB_ENV
            echo "✅ SSH connection successful with ubuntu"
          else
            echo "❌ SSH connection failed with both ec2-user and ubuntu"
            exit 1
          fi
          
      - name: Update Ansible inventory with environment variables
        run: |
          cd ansible
          # Update inventory with the actual EC2 host and SSH key path
          sed -i "s|ansible_host: .*|ansible_host: ${{ secrets.EC2_HOST }}|" inventory.yml
          sed -i "s|ansible_ssh_private_key_file: .*|ansible_ssh_private_key_file: ~/aws_keys.pem|" inventory.yml
          # Verify the inventory file
          cat inventory.yml
          
      - name: Deploy to EC2
        run: |
          cd ansible
          ansible-playbook -i inventory.yml playbook.yml -v  
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          ANSIBLE_USER: ${{ env.ANSIBLE_USER }}
          # Application secrets passed to Ansible
          TINYVAULT_DB_URL: ${{ secrets.DB_URL || 'sqlite+aiosqlite:///./data/tinyvault.db' }}
          TINYVAULT_TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TINYVAULT_ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
          TINYVAULT_WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          TINYVAULT_DEBUG: ${{ secrets.DEBUG || 'false' }}
          TINYVAULT_APP_NAME: ${{ secrets.APP_NAME || 'TinyVault' }}
          
      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/aws_keys.pem
